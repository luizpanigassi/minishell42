#ifndef MINISHELL_H
#define MINISHELL_H

#include "../libft/libft.h"

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>
#include <signal.h>
#include <readline/readline.h>
#include <readline/history.h>

#define CMD_NOT_FOUND 127
#define PERM_DENIED 126
#define SYNTAX_ERROR 2

// Parsing structure
typedef enum e_token
{
	T_WORD,
	T_PIPE,
	T_REDIR_OUT,
	T_REDIR_IN,
	T_APPEND,
	T_HEREDOC,
	T_EOF
} t_token;

typedef struct s_parse
{
	char *input;
	int pos;
	char curr_char;
	t_token token_type;
	char *token_value;
} t_parse;

// INPUT
void handle_error(char *message);
char *get_cmd_path(char *cmd);

// BUILTIN
int is_builtin(char **args);
int exec_cd(char **args);
int exec_exit(char **args);
int exec_echo(char **args);

// SIGNALS
void handle_sigint(int sig);
void setup_parent_signals(void);
void setup_child_signals(void);

// PARSING
void init_parser(t_parse *p, char *input);
void next_token(t_parse *p);
char **parse_args(t_parse *p);

// UTILS
void ft_free_array(char **array);
// Helper functions for parsing
int ft_isspace(int c);
void next_char(t_parse *p);
int is_special_char(char c);
char **list_to_array(t_list *lst);

#endif

builtin.c

#include "minishell.h"

int	is_builtin(char **tokens)
{
	if (ft_strncmp(tokens[0], "cd", 3) == 0)
		return (exec_cd(tokens));
	if (ft_strncmp(tokens[0], "echo", 5) == 0)
		return (exec_echo(tokens));
	/*if (ft_strncmp(tokens[0], "pwd") == 0)
		return (exec_pwd(tokens));
	if (ft_strncmp(tokens[0], "export") == 0)
		return (exec_export(tokens));
	if (ft_strncmp(tokens[0], "unset") == 0)
		return (exec_unset(args));
	if (ft_strncmp(tokens[0], "env") == 0)
		return (exec_env(tokens));*/
	if (ft_strncmp(tokens[0], "exit", 5) == 0)
		return (exec_exit(tokens));
	return (0);
}

int exec_cd(char **args)
{
	printf("Executar cd_%s\n", args[0]);
	return (1);
}

int	exec_exit(char **args)
{
	printf("%s\n", args[0]);
	exit(0);
	return (1);
}

int exec_echo(char **args)
{	int	i;

	i = 1;
	while (args[i])
		printf("%s", args[i++]);
	printf("\n");
	return (1);
}

input.c

#include "minishell.h"

void handle_error(char *message)
{
    perror(message);
    exit(EXIT_FAILURE);
}

char *get_cmd_path(char *cmd)
{
    char **paths;
    char *full_path;
    char *dir_slash;
    int i;

    // Handle absolute paths and commands with path specified
    if (ft_strchr(cmd, '/') != NULL)
    {
        if (access(cmd, X_OK) == 0)
            return (ft_strdup(cmd));
        return (NULL);
    }

    // Get PATH environment variable
    char *path_env = getenv("PATH");
    if (!path_env)
        return (NULL);

    // Split PATH into individual directories
    paths = ft_split(path_env, ':');
    if (!paths)
        return (NULL);

    i = -1;
    while (paths[++i])
    {
        // Create directory + slash
        dir_slash = ft_strjoin(paths[i], "/");
        if (!dir_slash)
        {
            ft_free_array(paths); // Implement this helper function
            return (NULL);
        }

        // Create full path
        full_path = ft_strjoin(dir_slash, cmd);
        free(dir_slash);
        if (!full_path)
        {
            ft_free_array(paths);
            return (NULL);
        }

        // Check if executable exists
        if (access(full_path, X_OK) == 0)
        {
            ft_free_array(paths);
            return (full_path);
        }
        free(full_path);
    }

    ft_free_array(paths);
    return (NULL);
}

main.c

#include "minishell.h"

extern char **environ; // Add this for environment access

void free_args(char **args)
{
	int i;

	if (!args)
		return;
	i = 0;
	while (args[i])
	{
		free(args[i]);
		i++;
	}
	free(args);
}

int main(void)
{
	char *input;
	char **tokens;
	pid_t pid;
	char *path;
	t_parse parser;

	setup_parent_signals();
	while (1)
	{
		input = readline("$minishell> ");
		if (!input) // Handle Ctrl+D
		{
			ft_putstr_fd("exit\n", STDOUT_FILENO);
			break;
		}
		add_history(input);

		// Parse input into tokens
		init_parser(&parser, input);
		next_token(&parser);
		tokens = parse_args(&parser);

		if (!tokens || !tokens[0]) // Handle empty input/parsing errors
		{
			free(input);
			free_args(tokens);
			continue;
		}

		if (is_builtin(tokens)) // Use tokens instead of args
		{
			// Execute builtin and cleanup
			free_args(tokens);
			free(input);
			continue;
		}

		pid = fork();
		if (pid == -1)
		{
			perror("fork");
			free_args(tokens);
			free(input);
			continue;
		}
		else if (pid == 0) // Child process
		{
			setup_child_signals();
			path = get_cmd_path(tokens[0]); // Use tokens[0]
			if (!path)
			{
				ft_putstr_fd("minishell: ", STDERR_FILENO);
				ft_putstr_fd(tokens[0], STDERR_FILENO);
				ft_putstr_fd(": command not found\n", STDERR_FILENO);
				free_args(tokens);
				free(input);
				exit(CMD_NOT_FOUND);
			}

			if (execve(path, tokens, environ) == -1) // Use environ
			{
				perror("minishell");
				free(path);
				free_args(tokens);
				free(input);
				exit(EXIT_FAILURE);
			}
		}
		else // Parent process
		{
			waitpid(pid, NULL, 0);
			free_args(tokens);
			free(input);
		}
	}
	return (0);
}


parser.c

#include "minishell.h"

static void skip_whitespace(t_parse *p)
{
	while (ft_isspace(p->curr_char))
		next_char(p);
}

static void handle_quotes(t_parse *p, char quote)
{
	size_t start = p->pos;

	next_char(p); // Skip opening quote
	while (p->curr_char && p->curr_char != quote)
		next_char(p);

	if (!p->curr_char)
	{
		ft_putstr_fd("minishell: unmatched quote\n", 2);
		return;
	}

	p->token_value = ft_substr(p->input, start, p->pos - start + 1);
	next_char(p); // Skip closing quote
}

static void handle_word(t_parse *p)
{
	size_t start = p->pos;

	while (p->curr_char && !ft_isspace(p->curr_char) &&
		   !is_special_char(p->curr_char))
	{
		next_char(p);
	}

	p->token_value = ft_substr(p->input, start, p->pos - start);
}

static void handle_special(t_parse *p)
{
	if (p->curr_char == '|')
	{
		p->token_type = T_PIPE;
		p->token_value = ft_strdup("|");
		next_char(p);
	}
	else if (p->curr_char == '>')
	{
		next_char(p);
		if (p->curr_char == '>')
		{
			p->token_type = T_APPEND;
			p->token_value = ft_strdup(">>");
			next_char(p);
		}
		else
		{
			p->token_type = T_REDIR_OUT;
			p->token_value = ft_strdup(">");
		}
	}
	// Add similar handling for < and <<
}

void next_token(t_parse *p)
{
	skip_whitespace(p);

	if (!p->curr_char)
	{
		p->token_type = T_EOF;
		return;
	}

	if (p->curr_char == '\'' || p->curr_char == '"')
		handle_quotes(p, p->curr_char);
	else if (is_special_char(p->curr_char))
		handle_special(p);
	else
		handle_word(p);
}

char **parse_args(t_parse *p)
{
	t_list *args = NULL;
	char **result;

	while (p->token_type != T_EOF)
	{
		if (p->token_type == T_WORD)
		{
			ft_lstadd_back(&args, ft_lstnew(p->token_value));
		}
		// Handle redirections and pipes here
		next_token(p);
	}

	// Convert list to array
	result = list_to_array(args);
	ft_lstclear(&args, free);
	return result;
}

signals.c

#include "minishell.h"

void	handle_sigint(int sig)
{
	(void)sig;
	write(1, "\n", 1);
	rl_replace_line("", 0);
	rl_on_new_line();
	rl_redisplay();
}

void	setup_parent_signals(void)
{
	struct sigaction	sa_int;
	struct sigaction	sa_quit;

	// Handle SIGINT (Ctrl-C)
	sa_int.sa_handler = handle_sigint;
	sigemptyset(&sa_int.sa_mask);
	sa_int.sa_flags = SA_RESTART;
	sigaction(SIGINT, &sa_int, NULL);

	// Ignore SIGQUIT (Ctrl-\)
	sa_quit.sa_handler = SIG_IGN;
	sigemptyset(&sa_quit.sa_mask);
	sa_quit.sa_flags = 0;
	sigaction(SIGQUIT, &sa_quit, NULL);
}

void	setup_child_signals(void)
{
	struct sigaction	sa_default;

	sa_default.sa_handler = SIG_DFL;
	sigemptyset(&sa_default.sa_mask);
	sa_default.sa_flags = 0;

	// Reset to default signals
	sigaction(SIGINT, &sa_default, NULL);
	sigaction(SIGQUIT, &sa_default, NULL);
}

utils.c

#include "minishell.h"

void ft_free_array(char **args)
{
	int i;

	if (!args)
		return;
	i = -1;
	while (args[++i])
		free(args[i]);
	free(args);
}

int ft_isspace(int c)
{
	return (c == ' ' || c == '\t' || c == '\n' || c == '\r' || c == '\f' || c == '\v');
}

void next_char(t_parse *p)
{
	if (p->input[p->pos])
	{
		p->pos++;
		p->curr_char = p->input[p->pos];
	}
	else
	{
		p->curr_char = '\0';
	}
}

int is_special_char(char c)
{
	return (c == '|' || c == '>' || c == '<' || c == ';');
}

char **list_to_array(t_list *lst)
{
	char **arr;
	int count;
	int i;
	t_list *tmp;

	count = ft_lstsize(lst);
	arr = malloc((count + 1) * sizeof(char *));
	if (!arr)
		return (NULL);

	i = 0;
	tmp = lst;
	while (tmp)
	{
		arr[i] = ft_strdup((char *)tmp->content);
		if (!arr[i])
		{
			ft_free_array(arr);
			return (NULL);
		}
		tmp = tmp->next;
		i++;
	}
	arr[i] = NULL;
	return (arr);
}
