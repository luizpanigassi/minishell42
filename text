header

#include "minishell.h"

extern volatile sig_atomic_t g_exit_status;

int is_builtin(char **tokens)
{
	const char *builtins[] = {"echo", "cd", "pwd", "export",
							  "unset", "env", "exit", NULL};
	int i;

	if (!tokens || !tokens[0])
		return (0);
	i = -1;
	while (builtins[++i])
	{
		if (ft_strcmp(tokens[0], builtins[i]) == 0)
			return (1);
	}
	return (0);
}

int exec_builtin(char **args)
{
	if (ft_strcmp(args[0], "echo") == 0)
		return (exec_echo(args));
	if (ft_strcmp(args[0], "cd") == 0)
		return (exec_cd(args));
	if (ft_strcmp(args[0], "pwd") == 0)
		return (exec_pwd(args));
	if (ft_strcmp(args[0], "export") == 0)
		return (exec_export(args));
	if (ft_strcmp(args[0], "unset") == 0)
		return (exec_unset(args));
	if (ft_strcmp(args[0], "env") == 0)
		return (exec_env(args));
	if (ft_strcmp(args[0], "exit") == 0)
		return (exec_exit(args));
	return (0);
}

int exec_cd(char **args)
{
	char *oldpwd = getcwd(NULL, 0);
	char *path = NULL;
	char *newpwd;

	if (!oldpwd)
		return (perror("cd"), 1);

	if (!args[1] || ft_strcmp(args[1], "~") == 0)
		path = getenv("HOME");
	else if (ft_strcmp(args[1], "-") == 0)
		path = getenv("OLDPWD");
	else
		path = args[1];

	if (!path || chdir(path) != 0)
	{
		ft_putstr_fd("minishell: cd: ", STDERR_FILENO);
		ft_putstr_fd(args[1], STDERR_FILENO);
		ft_putstr_fd(": ", STDERR_FILENO);
		ft_putstr_fd(strerror(errno), STDERR_FILENO);
		ft_putstr_fd("\n", STDERR_FILENO);
		free(oldpwd);
		return (1);
	}

	newpwd = getcwd(NULL, 0);
	if (!newpwd)
	{
		free(oldpwd);
		return (perror("cd"), 1);
	}

	update_env_var("OLDPWD", oldpwd);
	update_env_var("PWD", newpwd);
	free(oldpwd);
	free(newpwd);
	return (0);
}

int exec_exit(char **args)
{
	int status = 0;

	if (args[1] && args[2])
	{
		ft_putstr_fd("minishell: exit error: too many arguments\n", STDERR_FILENO);
		return (1); // Return error code 1 (shell does NOT exit)
	}

	if (args[1])
	{
		if (ft_isnumber(args[1]))
			status = ft_atoi(args[1]);
		else
		{
			ft_putstr_fd("minishell: exit error: numeric argument required\n", STDERR_FILENO);
			status = 2;
			exit(status);
		}
	}
	printf("Exiting minishell, goodbye!\n");
	exit(status);
}

int exec_echo(char **args) // use -n
{
	int i;
	int nl_flag;

	i = 1;
	nl_flag = 0;
	if (args[1] && ft_strcmp(args[1], "-n") == 0)
	{
		nl_flag = 1;
		i++;
	}
	while (args[i])
	{
		ft_putstr_fd(args[i], STDOUT_FILENO);
		if (args[++i])
			ft_putchar_fd(' ', STDOUT_FILENO);
	}
	if (!nl_flag)
		ft_putchar_fd('\n', STDOUT_FILENO);
	return (0);
}

int exec_env(char **args)
{
	extern char **environ;
	int i;

	(void)args;
	i = -1;
	while (environ[++i])
		printf("%s\n", environ[i]);
	return (0);
}

int exec_pwd(char **args)
{
	char *cwd;

	(void)args;
	cwd = getcwd(NULL, 0); // Let getcwd allocate memory
	if (cwd)
	{
		printf("%s\n", cwd);
		free(cwd);
		return (0);
	}
	else
	{
		perror("minishell: pwd");
		return (1);
	}
}

int exec_export(char **args)
{
	extern char **environ;

	if (!args[1])
	{
		print_export_declarations();
		return (0);
	}

	int ret = 0;
	int i = 1;
	while (args[i])
	{
		char *eq_pos = ft_strchr(args[i], '=');
		char *var_name = NULL;
		char *value = NULL;

		if (eq_pos)
		{
			var_name = ft_substr(args[i], 0, eq_pos - args[i]);
			value = ft_strdup(eq_pos + 1);
			// Strip surrounding quotes if present
			if (value && value[0] == '"' && value[ft_strlen_size(value) - 1] == '"')
			{
				char *tmp = ft_substr(value, 1, ft_strlen_size(value) - 2);
				free(value);
				value = tmp;
			}
		}
		else
			var_name = ft_strdup(args[i]);

		if (!is_valid_var_name(var_name))
		{
			ft_putstr_fd("minishell: export: `", STDERR_FILENO);
			ft_putstr_fd(args[i], STDERR_FILENO);
			ft_putstr_fd("': not a valid identifier\n", STDERR_FILENO);
			ret = 1;
			free(var_name); // Free only on error
			free(value);	// Free only on error
			i++;
			continue;
		}

		if (eq_pos)
			update_env_var(var_name, value); // Ownership transferred
		else
			ensure_var_exported(var_name); // Ownership transferred
		i++;
	}
	return (ret);
}

// builtin.c
char **ft_copy_env(char **original)
{
	int count = 0;
	while (original[count])
		count++;

	char **copy = malloc(sizeof(char *) * (count + 1));
	if (!copy)
		return (NULL);

	int i = 0;
	while (original[i])
	{
		copy[i] = ft_strdup(original[i]);
		i++;
	}
	copy[count] = NULL;
	return (copy);
}

int exec_unset(char **args)
{
	extern char **environ;

	if (!args[1])
		return (0);

	int ret = 0;
	int i = 1;
	while (args[i])
	{
		if (!is_valid_var_name(args[i]))
		{
			ft_putstr_fd("minishell: unset: `", STDERR_FILENO);
			ft_putstr_fd(args[i], STDERR_FILENO);
			ft_putstr_fd("': not a valid identifier\n", STDERR_FILENO);
			ret = 1;
			i++;
			continue;
		}

		char **env_ptr = environ;
		while (*env_ptr)
		{
			char *eq = ft_strchr(*env_ptr, '=');
			size_t var_len = eq ? eq - *env_ptr : ft_strlen(*env_ptr);

			if (ft_strncmp(*env_ptr, args[i], var_len) == 0 && var_len == ft_strlen_size(args[i]))
			{
				free(*env_ptr);
				char **ptr = env_ptr;
				while (*ptr)
				{
					*ptr = *(ptr + 1);
					ptr++;
				}
				break;
			}
			env_ptr++;
		}
		i++;
	}
	return (ret);
}

void update_env_var(char *var, char *value)
{
	extern char **environ;
	char *new_entry;
	char **env_ptr = environ;

	// 1. Create new entry (e.g., "VAR=value" or "VAR=")
	new_entry = (value) ? ft_strjoin3(var, "=", value) : ft_strjoin(var, "=");

	// 2. Find and replace existing entry
	while (*env_ptr)
	{
		char *eq = ft_strchr(*env_ptr, '=');
		if (eq && ft_strncmp(*env_ptr, var, eq - *env_ptr) == 0)
		{
			free(*env_ptr);
			*env_ptr = new_entry;
			free(var);
			free(value);
			return;
		}
		env_ptr++;
	}

	// 3. Add new entry
	environ = ft_array_append(environ, new_entry);
	free(var);
	free(value);
}

void ensure_var_exported(char *var_name)
{
	extern char **environ;
	char **env_ptr = environ;
	int exists = 0;

	while (*env_ptr && !exists)
	{
		char *eq = ft_strchr(*env_ptr, '=');
		if (eq && ft_strncmp(*env_ptr, var_name, eq - *env_ptr) == 0)
			exists = 1;
		env_ptr++;
	}
	if (!exists)
		update_env_var(var_name, NULL);
	else
		free(var_name); // Free here since update_env_var no longer owns it
}

builtin.c

#include "minishell.h"

extern volatile sig_atomic_t g_exit_status;

int is_builtin(char **tokens)
{
	const char *builtins[] = {"echo", "cd", "pwd", "export",
							  "unset", "env", "exit", NULL};
	int i;

	if (!tokens || !tokens[0])
		return (0);
	i = -1;
	while (builtins[++i])
	{
		if (ft_strcmp(tokens[0], builtins[i]) == 0)
			return (1);
	}
	return (0);
}

int exec_builtin(char **args)
{
	if (ft_strcmp(args[0], "echo") == 0)
		return (exec_echo(args));
	if (ft_strcmp(args[0], "cd") == 0)
		return (exec_cd(args));
	if (ft_strcmp(args[0], "pwd") == 0)
		return (exec_pwd(args));
	if (ft_strcmp(args[0], "export") == 0)
		return (exec_export(args));
	if (ft_strcmp(args[0], "unset") == 0)
		return (exec_unset(args));
	if (ft_strcmp(args[0], "env") == 0)
		return (exec_env(args));
	if (ft_strcmp(args[0], "exit") == 0)
		return (exec_exit(args));
	return (0);
}

int exec_cd(char **args)
{
	char *oldpwd = getcwd(NULL, 0);
	char *path = NULL;
	char *newpwd;

	if (!oldpwd)
		return (perror("cd"), 1);

	if (!args[1] || ft_strcmp(args[1], "~") == 0)
		path = getenv("HOME");
	else if (ft_strcmp(args[1], "-") == 0)
		path = getenv("OLDPWD");
	else
		path = args[1];

	if (!path || chdir(path) != 0)
	{
		ft_putstr_fd("minishell: cd: ", STDERR_FILENO);
		ft_putstr_fd(args[1], STDERR_FILENO);
		ft_putstr_fd(": ", STDERR_FILENO);
		ft_putstr_fd(strerror(errno), STDERR_FILENO);
		ft_putstr_fd("\n", STDERR_FILENO);
		free(oldpwd);
		return (1);
	}

	newpwd = getcwd(NULL, 0);
	if (!newpwd)
	{
		free(oldpwd);
		return (perror("cd"), 1);
	}

	update_env_var("OLDPWD", oldpwd);
	update_env_var("PWD", newpwd);
	free(oldpwd);
	free(newpwd);
	return (0);
}

int exec_exit(char **args)
{
	int status = 0;

	if (args[1] && args[2])
	{
		ft_putstr_fd("minishell: exit error: too many arguments\n", STDERR_FILENO);
		return (1); // Return error code 1 (shell does NOT exit)
	}

	if (args[1])
	{
		if (ft_isnumber(args[1]))
			status = ft_atoi(args[1]);
		else
		{
			ft_putstr_fd("minishell: exit error: numeric argument required\n", STDERR_FILENO);
			status = 2;
			exit(status);
		}
	}
	printf("Exiting minishell, goodbye!\n");
	exit(status);
}

int exec_echo(char **args) // use -n
{
	int i;
	int nl_flag;

	i = 1;
	nl_flag = 0;
	if (args[1] && ft_strcmp(args[1], "-n") == 0)
	{
		nl_flag = 1;
		i++;
	}
	while (args[i])
	{
		ft_putstr_fd(args[i], STDOUT_FILENO);
		if (args[++i])
			ft_putchar_fd(' ', STDOUT_FILENO);
	}
	if (!nl_flag)
		ft_putchar_fd('\n', STDOUT_FILENO);
	return (0);
}

int exec_env(char **args)
{
	extern char **environ;
	int i;

	(void)args;
	i = -1;
	while (environ[++i])
		printf("%s\n", environ[i]);
	return (0);
}

int exec_pwd(char **args)
{
	char *cwd;

	(void)args;
	cwd = getcwd(NULL, 0); // Let getcwd allocate memory
	if (cwd)
	{
		printf("%s\n", cwd);
		free(cwd);
		return (0);
	}
	else
	{
		perror("minishell: pwd");
		return (1);
	}
}

int exec_export(char **args)
{
	extern char **environ;

	if (!args[1])
	{
		print_export_declarations();
		return (0);
	}

	int ret = 0;
	int i = 1;
	while (args[i])
	{
		char *eq_pos = ft_strchr(args[i], '=');
		char *var_name = NULL;
		char *value = NULL;

		if (eq_pos)
		{
			var_name = ft_substr(args[i], 0, eq_pos - args[i]);
			value = ft_strdup(eq_pos + 1);
			// Strip surrounding quotes if present
			if (value && value[0] == '"' && value[ft_strlen_size(value) - 1] == '"')
			{
				char *tmp = ft_substr(value, 1, ft_strlen_size(value) - 2);
				free(value);
				value = tmp;
			}
		}
		else
			var_name = ft_strdup(args[i]);

		if (!is_valid_var_name(var_name))
		{
			ft_putstr_fd("minishell: export: `", STDERR_FILENO);
			ft_putstr_fd(args[i], STDERR_FILENO);
			ft_putstr_fd("': not a valid identifier\n", STDERR_FILENO);
			ret = 1;
			free(var_name); // Free only on error
			free(value);	// Free only on error
			i++;
			continue;
		}

		if (eq_pos)
			update_env_var(var_name, value); // Ownership transferred
		else
			ensure_var_exported(var_name); // Ownership transferred
		i++;
	}
	return (ret);
}

// builtin.c
char **ft_copy_env(char **original)
{
	int count = 0;
	while (original[count])
		count++;

	char **copy = malloc(sizeof(char *) * (count + 1));
	if (!copy)
		return (NULL);

	int i = 0;
	while (original[i])
	{
		copy[i] = ft_strdup(original[i]);
		i++;
	}
	copy[count] = NULL;
	return (copy);
}

int exec_unset(char **args)
{
	extern char **environ;

	if (!args[1])
		return (0);

	int ret = 0;
	int i = 1;
	while (args[i])
	{
		if (!is_valid_var_name(args[i]))
		{
			ft_putstr_fd("minishell: unset: `", STDERR_FILENO);
			ft_putstr_fd(args[i], STDERR_FILENO);
			ft_putstr_fd("': not a valid identifier\n", STDERR_FILENO);
			ret = 1;
			i++;
			continue;
		}

		char **env_ptr = environ;
		while (*env_ptr)
		{
			char *eq = ft_strchr(*env_ptr, '=');
			size_t var_len = eq ? eq - *env_ptr : ft_strlen(*env_ptr);

			if (ft_strncmp(*env_ptr, args[i], var_len) == 0 && var_len == ft_strlen_size(args[i]))
			{
				free(*env_ptr);
				char **ptr = env_ptr;
				while (*ptr)
				{
					*ptr = *(ptr + 1);
					ptr++;
				}
				break;
			}
			env_ptr++;
		}
		i++;
	}
	return (ret);
}

void update_env_var(char *var, char *value)
{
	extern char **environ;
	char *new_entry;
	char **env_ptr = environ;

	// 1. Create new entry (e.g., "VAR=value" or "VAR=")
	new_entry = (value) ? ft_strjoin3(var, "=", value) : ft_strjoin(var, "=");

	// 2. Find and replace existing entry
	while (*env_ptr)
	{
		char *eq = ft_strchr(*env_ptr, '=');
		if (eq && ft_strncmp(*env_ptr, var, eq - *env_ptr) == 0)
		{
			free(*env_ptr);
			*env_ptr = new_entry;
			free(var);
			free(value);
			return;
		}
		env_ptr++;
	}

	// 3. Add new entry
	environ = ft_array_append(environ, new_entry);
	free(var);
	free(value);
}

void ensure_var_exported(char *var_name)
{
	extern char **environ;
	char **env_ptr = environ;
	int exists = 0;

	while (*env_ptr && !exists)
	{
		char *eq = ft_strchr(*env_ptr, '=');
		if (eq && ft_strncmp(*env_ptr, var_name, eq - *env_ptr) == 0)
			exists = 1;
		env_ptr++;
	}
	if (!exists)
		update_env_var(var_name, NULL);
	else
		free(var_name); // Free here since update_env_var no longer owns it
}

exit_status.c

#include "minishell.h"

void set_exit_status(int status)
{
	g_exit_status = status;
}

int get_exit_status(void)
{
	return (g_exit_status);
}

input.c

#include "minishell.h"

void handle_error(char *message)
{
	perror(message);
	exit(EXIT_FAILURE);
}

char *get_cmd_path(char *cmd)
{
	char **paths;
	char *full_path;
	char *dir_slash;
	int i;

	// Handle absolute paths and commands with path specified
	if (ft_strchr(cmd, '/') != NULL)
	{
		if(access(cmd, X_OK) == 0)
			return (ft_strdup(cmd));
		return (NULL);
	}
	// Get PATH environment variable
	char *path_env = getenv("PATH");
	if(!path_env)
		return (NULL);
	// Split PATH into individual directories
	paths = ft_split(path_env, ':');
	if(!paths)
		return (NULL);

	i = -1;
	while (paths[++i])
	{
		// Create directory + slash
		dir_slash = ft_strjoin(paths[i], "/");
		if (!dir_slash)
		{
			ft_free_array(paths);
			return (NULL);
		}
		// Create full path
		full_path = ft_strjoin(dir_slash, cmd);
		free(dir_slash);
		if (!full_path)
		{
			ft_free_array(paths);
			return (NULL);
		}
		// Check if executable exists
		if (access(full_path, X_OK) == 0)
		{
			ft_free_array(paths);
			return (full_path);
		}
		free (full_path);
	}
	ft_free_array(paths);
	return (NULL);
}

main.c

#include "minishell.h"

volatile sig_atomic_t g_exit_status = 0;

void free_pipeline(t_cmd *pipeline)
{
	t_cmd *current;
	t_redir *redir, *tmp_redir;

	while (pipeline)
	{
		current = pipeline;
		pipeline = pipeline->next;

		// Free arguments
		if (current->args)
			ft_free_array(current->args);

		// Free redirections
		redir = current->redirections;
		while (redir)
		{
			tmp_redir = redir;
			redir = redir->next;
			free(tmp_redir->filename);
			free(tmp_redir);
		}

		free(current);
	}
}

void execute_command(t_cmd *cmd, int pipe_in, int pipe_out)
{
	pid_t pid;
	extern char **environ;

	// Always fork for pipeline commands
	pid = fork();
	if (pid == 0)
	{
		// Child process
		setup_child_signals();
		handle_redirections(pipe_in, pipe_out, cmd->redirections);

		if (is_builtin(cmd->args))
		{
			exec_builtin(cmd->args);
			exit(g_exit_status); // Make sure to exit after builtin
		}
		else
		{
			char *cmd_path = get_cmd_path(cmd->args[0]);
			if (!cmd_path)
			{
				ft_putstr_fd("minishell: command not found: ", STDERR_FILENO);
				ft_putstr_fd(cmd->args[0], STDERR_FILENO);
				ft_putstr_fd("\n", STDERR_FILENO);
				exit(CMD_NOT_FOUND);
			}

			// Execute the command with the current environment
			execve(cmd_path, cmd->args, environ);

			// If execve returns, it failed
			perror("minishell");
			free(cmd_path);
			exit(EXIT_FAILURE);
		}
	}
	else if (pid < 0)
	{
		perror("fork");
	}
}

int execute_pipeline(t_cmd *pipeline)
{
	int prev_pipe[2] = {-1, -1};
	int next_pipe[2];
	t_cmd *current = pipeline;
	pid_t last_pid = -1;
	int status;
	extern char **environ;

	while (current)
	{
		if (current->next && pipe(next_pipe) < 0)
		{
			perror("minishell: pipe");
			return (-1);
		}

		pid_t pid = fork();
		if (pid == 0) // Child process
		{
			setup_child_signals();
			handle_redirections(
				prev_pipe[0],					   // Input from previous command
				current->next ? next_pipe[1] : -1, // Output to next command
				current->redirections			   // File redirections
			);

			// Close pipe ends in child
			if (prev_pipe[0] != -1)
				close(prev_pipe[0]);
			if (current->next)
			{
				close(next_pipe[0]);
				close(next_pipe[1]);
			}

			if (is_builtin(current->args))
			{
				int result = exec_builtin(current->args);
				exit(result);
			}
			else
			{
				char *path = get_cmd_path(current->args[0]);
				if (!path)
				{
					ft_putstr_fd("minishell: ", STDERR_FILENO);
					ft_putstr_fd(current->args[0], STDERR_FILENO);
					ft_putstr_fd(": command not found\n", STDERR_FILENO);
					exit(CMD_NOT_FOUND);
				}
				execve(path, current->args, environ);
				perror("minishell");
				exit(EXIT_FAILURE);
			}
		}

		// Parent continues
		if (prev_pipe[0] != -1)
			close(prev_pipe[0]);
		close(prev_pipe[1]);

		// Prepare for next iteration
		if (current->next)
		{
			prev_pipe[0] = next_pipe[0];
			prev_pipe[1] = next_pipe[1];
		}

		if (!current->next)
			last_pid = pid;
		current = current->next;
	}

	// Wait for last command
	if (last_pid != -1)
	{
		waitpid(last_pid, &status, 0);
		g_exit_status = WEXITSTATUS(status);
	}

	// Cleanup remaining processes
	while (waitpid(-1, NULL, WNOHANG) > 0)
		;

	return (g_exit_status);
}

int handle_redirections(int pipe_in, int pipe_out, t_redir *redirections)
{
	// Handle pipe redirections
	if (pipe_in != STDIN_FILENO && pipe_in != -1)
	{
		if (dup2(pipe_in, STDIN_FILENO) == -1)
			return (perror("minishell"), -1);
		close(pipe_in);
	}
	if (pipe_out != STDOUT_FILENO && pipe_out != -1)
	{
		if (dup2(pipe_out, STDOUT_FILENO) == -1)
			return (perror("minishell"), -1);
		close(pipe_out);
	}

	// Handle file redirections
	t_redir *current = redirections;
	while (current)
	{
		int fd = -1;
		if (current->type == T_HEREDOC)
			fd = create_heredoc(current->filename);
		else if (current->type == T_REDIR_IN)
			fd = open(current->filename, O_RDONLY);
		else if (current->type == T_REDIR_OUT)
			fd = open(current->filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
		else if (current->type == T_APPEND)
			fd = open(current->filename, O_WRONLY | O_CREAT | O_APPEND, 0644);

		if (fd == -1)
			return (perror("minishell"), -1);

		if (current->type == T_REDIR_IN || current->type == T_HEREDOC)
		{
			if (dup2(fd, STDIN_FILENO) == -1)
				return (close(fd), perror("minishell"), -1);
		}
		else
		{
			if (dup2(fd, STDOUT_FILENO) == -1)
				return (close(fd), perror("minishell"), -1);
		}
		close(fd);
		current = current->next;
	}
	return (0);
}

int main(void)
{
	char *input;
	t_cmd *pipeline;
	extern char **environ;
	char **env_copy;

	env_copy = ft_copy_env(environ);
	environ = env_copy;
	setup_parent_signals();
	while (1)
	{
		setup_parent_signals();
		input = readline("minishell> ");
		if (!input)
		{
			ft_putstr_fd("exit\n", STDOUT_FILENO);
			break;
		}

		if (ft_strlen(input) > 0)
			add_history(input);
		else
		{
			free(input);
			continue;
		}

		t_parse parser;
		init_parser(&parser, input);
		pipeline = parse_pipeline(&parser);

		if (!pipeline || !pipeline->args)
		{
			free(input);
			free_pipeline(pipeline);
			continue;
		}

		// 🚨 Handle "exit" directly in the parent process
		if (pipeline && !pipeline->next && is_builtin(pipeline->args))
		{
			int saved_stdin = dup(STDIN_FILENO);
			int saved_stdout = dup(STDOUT_FILENO);
			int saved_stderr = dup(STDERR_FILENO);

			// Apply redirections (no pipes: -1, -1)
			if (handle_redirections(-1, -1, pipeline->redirections) != 0)
			{
				set_exit_status(1); // Redirection error
				close(saved_stdin);
				close(saved_stdout);
				close(saved_stderr);
			}
			else
			{
				int result = exec_builtin(pipeline->args);
				set_exit_status(result);

				// Restore original descriptors
				dup2(saved_stdin, STDIN_FILENO);
				dup2(saved_stdout, STDOUT_FILENO);
				dup2(saved_stderr, STDERR_FILENO);
			}

			// Close saved descriptors
			close(saved_stdin);
			close(saved_stdout);
			close(saved_stderr);

			if (ft_strcmp(pipeline->args[0], "exit") == 0)
			{
				free(input);
				free_pipeline(pipeline);
				if (get_exit_status() == 1)
					continue;
				else
					exit(get_exit_status());
			}
		}
		else
		{
			execute_pipeline(pipeline);
		}

		free(input);
		free_pipeline(pipeline);
	}
	rl_clear_history(); // Clear history entries
	rl_reset_terminal(NULL);
	return 0;
}

parser.c

#include "minishell.h"

void init_parser(t_parse *p, char *input)
{
	p->input = input;
	p->pos = 0;
	p->curr_char = input[0]; // Initialize first character
	p->token_type = T_EOF;	 // Default to EOF
	p->token_value = NULL;
}

static void skip_whitespace(t_parse *p)
{
	while (ft_isspace(p->curr_char))
		next_char(p);
}

static void handle_quotes(t_parse *p, char quote)
{
	size_t start = p->pos;

	next_char(p); // Skip opening quote
	while (p->curr_char && p->curr_char != quote)
		next_char(p);

	if (!p->curr_char)
	{
		ft_putstr_fd("minishell: unmatched quote\n", 2);
		return;
	}

	p->token_value = ft_substr(p->input, start + 1, p->pos - start - 1);
	p->token_type = T_WORD;
	next_char(p); // Skip closing quote
}

static void handle_word(t_parse *p)
{
	size_t start = p->pos;
	char *sub;

	while (p->curr_char && !ft_isspace(p->curr_char) &&
		   !is_special_char(p->curr_char))
	{
		next_char(p);
	}
	sub = ft_substr(p->input, start, p->pos - start);
	p->token_value = ft_strdup(sub);
	free(sub); // Free the temporary substring
	p->token_type = T_WORD;
}

// Updated handle_special function
static void handle_special(t_parse *p)
{
	if (p->curr_char == '|')
	{
		p->token_type = T_PIPE;
		p->token_value = ft_strdup("|");
		next_char(p);
	}
	else if (p->curr_char == '>')
	{
		next_char(p);
		if (p->curr_char == '>')
		{
			p->token_type = T_APPEND;
			p->token_value = ft_strdup(">>");
			next_char(p);
		}
		else
		{
			p->token_type = T_REDIR_OUT;
			p->token_value = ft_strdup(">");
		}
	}
	else if (p->curr_char == '<')
	{
		next_char(p);
		if (p->curr_char == '<')
		{
			p->token_type = T_HEREDOC;
			p->token_value = ft_strdup("<<");
			next_char(p);
		}
		else
		{
			p->token_type = T_REDIR_IN;
			p->token_value = ft_strdup("<");
		}
	}
}

void next_token(t_parse *p)
{
	skip_whitespace(p);

	if (!p->curr_char)
	{
		p->token_type = T_EOF;
		return;
	}

	if (p->curr_char == '\'' || p->curr_char == '"')
		handle_quotes(p, p->curr_char);
	else if (is_special_char(p->curr_char))
		handle_special(p);
	else
		handle_word(p);
}

t_cmd *parse_args(t_parse *p)
{
	t_list *args = NULL;
	t_redir *redirs = NULL;
	t_redir **redir_tail = &redirs; // For correct redirection order

	while (p->token_type != T_EOF && p->token_type != T_PIPE)
	{
		if (p->token_type == T_WORD)
		{
			ft_lstadd_back(&args, ft_lstnew(ft_strdup(p->token_value)));
		}
		else if (is_redirection(p->token_type))
		{
			t_redir *redir = malloc(sizeof(t_redir));
			redir->type = p->token_type;
			next_token(p); // Get filename
			redir->filename = ft_strdup(p->token_value);
			redir->next = NULL;

			// Append to end of list
			*redir_tail = redir;
			redir_tail = &redir->next;
		}
		next_token(p);
	}

	t_cmd *cmd = malloc(sizeof(t_cmd));
	cmd->args = list_to_array(args);
	cmd->redirections = redirs;
	cmd->next = NULL;
	ft_lstclear(&args, free);
	return cmd;
}

int create_heredoc(const char *delimiter)
{
	char *line;
	int tmp_fd = open(".heredoc.tmp", O_WRONLY | O_CREAT | O_TRUNC, 0644);

	while (1)
	{
		line = readline("> ");
		if (!line || ft_strcmp(line, delimiter) == 0)
			break;
		write(tmp_fd, line, ft_strlen(line));
		write(tmp_fd, "\n", 1);
		free(line);
	}
	close(tmp_fd);
	tmp_fd = open(".heredoc.tmp", O_RDONLY);
	unlink(".heredoc.tmp"); // Delete temp file after use
	return tmp_fd;
}

int is_redirection(t_token type)
{
	return (type == T_REDIR_IN || type == T_REDIR_OUT ||
			type == T_APPEND || type == T_HEREDOC);
}

t_cmd *parse_pipeline(t_parse *p)
{
	t_cmd *head = NULL;
	t_cmd **curr = &head;

	next_token(p);

	while (1)
	{
		t_cmd *cmd = parse_args(p);
		if (!cmd)
			break;

		*curr = cmd;
		curr = &cmd->next;

		if (p->token_type != T_PIPE)
			break;

		next_token(p); // Consume the pipe
	}

	return head;
}

signals.c

#include "minishell.h"

void handle_sigint(int sig)
{
	(void)sig;
	set_exit_status(130); // Set exit status for Ctrl-C
	write(1, "\n", 1);
	rl_replace_line("", 0);
	rl_on_new_line();
	rl_redisplay();
}

void setup_parent_signals(void)
{
	struct sigaction sa_int;
	struct sigaction sa_quit;

	// Handle SIGINT (Ctrl-C)
	sa_int.sa_handler = handle_sigint;
	sigemptyset(&sa_int.sa_mask);
	sa_int.sa_flags = SA_RESTART;
	sigaction(SIGINT, &sa_int, NULL);

	// Ignore SIGQUIT (Ctrl-\)
	sa_quit.sa_handler = SIG_IGN;
	sigemptyset(&sa_quit.sa_mask);
	sa_quit.sa_flags = 0;
	sigaction(SIGQUIT, &sa_quit, NULL);
}

void setup_child_signals(void)
{
	struct sigaction sa_default;

	sa_default.sa_handler = SIG_DFL;
	sigemptyset(&sa_default.sa_mask);
	sa_default.sa_flags = 0;

	// Reset to default signals
	signal(SIGINT, SIG_DFL);
	signal(SIGQUIT, SIG_DFL);
}

utils.c

#include "minishell.h"

void ft_free_array(char **args)
{
	int i;

	if (!args)
		return;
	i = -1;
	while (args[++i])
		free(args[i]);
	free(args);
}

int ft_isspace(int c)
{
	return (c == ' ' || c == '\t' || c == '\n' || c == '\r' || c == '\f' || c == '\v');
}

void next_char(t_parse *p)
{
	if (p->input[p->pos])
	{
		p->pos++;
		p->curr_char = p->input[p->pos];
	}
	else
	{
		p->curr_char = '\0';
	}
}

int is_special_char(char c)
{
	return (c == '|' || c == '>' || c == '<' || c == ';');
}

char **list_to_array(t_list *lst)
{
	char **arr;
	int count;
	int i;
	t_list *tmp;

	count = ft_lstsize(lst);
	arr = malloc((count + 1) * sizeof(char *));
	if (!arr)
		return (NULL);

	i = 0;
	tmp = lst;
	while (tmp)
	{
		arr[i] = ft_strdup((char *)tmp->content);
		if (!arr[i])
		{
			ft_free_array(arr);
			return (NULL);
		}
		tmp = tmp->next;
		i++;
	}
	arr[i] = NULL;
	return (arr);
}

void free_cmd(t_cmd *cmd)
{
	t_redir *redir;
	t_redir *tmp;

	if (!cmd)
		return;

	// Free arguments
	ft_free_array(cmd->args);

	// Free redirections
	redir = cmd->redirections;
	while (redir)
	{
		tmp = redir->next;
		free(redir->filename);
		free(redir);
		redir = tmp;
	}
	free(cmd);
}

int ft_strcmp(const char *s1, const char *s2)
{
	while (*s1 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return (*(unsigned char *)s1 - *(unsigned char *)s2);
}

int ft_isnumber(const char *str)
{
	int i;

	if (!str || !*str) // Handle NULL or empty string
		return (0);
	i = 0;
	// Allow optional leading +/-
	if (str[i] == '+' || str[i] == '-')
		i++;
	// Check remaining characters are digits
	while (str[i])
	{
		if (!ft_isdigit(str[i]))
			return (0);
		i++;
	}
	// Must have at least one digit (after optional sign)
	return (i > 0 && (str[0] == '+' || str[0] == '-') ? i > 1 : i > 0);
}

int is_valid_var_name(const char *name)
{
	int i;

	if (!name || !name[0] || ft_isdigit(name[0]))
		return (0);

	i = 0;
	while (name[i])
	{
		if (!ft_isalnum(name[i]) && name[i] != '_')
			return (0);
		i++;
	}
	return (1);
}

void print_export_declarations(void)
{
	extern char **environ;
	int i = 0;

	while (environ[i])
	{
		char *eq = ft_strchr(environ[i], '=');
		if (eq)
		{
			*eq = '\0';
			printf("declare -x %s=\"%s\"\n", environ[i], eq + 1);
			*eq = '=';
		}
		else
			printf("declare -x %s\n", environ[i]);
		i++;
	}
}

// In your utils.c
size_t ft_strlen_size(const char *str)
{
	size_t len = 0;
	while (str[len])
		len++;
	return (len);
}

// Joins three strings (create "VAR=value")
char *ft_strjoin3(const char *s1, const char *s2, const char *s3)
{
	char *tmp = ft_strjoin(s1, s2);
	char *result = ft_strjoin(tmp, s3);
	free(tmp);
	return result;
}

// Appends to array (used for environ)
char **ft_array_append(char **array, char *new_element)
{
	int count = 0;
	while (array && array[count])
		count++;

	char **new_array = malloc(sizeof(char *) * (count + 2));
	if (!new_array)
		return NULL;

	int i = -1;
	while (++i < count)
		new_array[i] = array[i];
	new_array[count] = new_element;
	new_array[count + 1] = NULL;

	free(array);
	return new_array;
}
